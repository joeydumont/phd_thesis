### latex.makefile
# Author: Joey Dumont
# Based on latex.makefile by: Jason Hiebel
# <https://github.com/JasonHiebel/latex.makefile>

# This is a simple makefile for compiling LaTeX documents. The core assumption
# is that the resulting documents should have any parameters effecting
# rendering quality set to theoretical limits and that all fonts should be
# embedded. While typically overkill, the detriment to doing so is negligible.

# Targets:
#    default : compiles the document to a PDF file using the defined
#              latex generating engine. (pdflatex, xelatex, etc)
#    display : displays the compiled document in a common PDF viewer.
#              (currently linux = evince, OSX = open)
#    clean   : removes the $(OUTDIR)/ directory holding temporary files
#              and the $(OUTDIR_FIGS)/ directory holding the binary figures.

# -- Main project options.
PROJECT=phd_thesis_jayd
CLASS=inrsthesis
LATEX=pdflatex
OUTDIR=out
LIGHT_TABLE=light_table

# -- Figure generation options (TeX)
FIG_INPUTDIR=light_table
FIG_LATEX=pdflatex
FIG_OUTDIR=figs
FIG_LATEXFLAGS=-output-directory $(FIG_OUTDIR)/

# -- Figure generation (Python)
PY_INPUTDIR=light_table
PY_BINARY=python
PY_OUTDIR=figs
PY_FLAGS=--output-directory $(PY_OUTDIR)

# -- User targets.
default: $(OUTDIR)/$(PROJECT).pdf

display: default
	(${PDFVIEWER} $(OUTDIR)/$(PROJECT).pdf &)

### Extra Targets
# Removes the mendeley tags, groups and file metadata out of the bibliographic
# files.
prune-bib: $(BIB_FILES)
	$(foreach file,$(BIB_FILES), $(shell sed -i.bak '/^file\|^mendeley\|keywords/d' $(file)))
	$(foreach file,$(BIB_FILES), $(shell biber -q -O $(file) --output-format=bibtex --configfile=biber-tool.conf --tool $(file)))
	$(foreach file,$(BIB_FILES), $(shell sed -i 's/USERA/YEAR/' $(file)))

log: $(OUTDIR)/$(PROJECT).pdf
	pplatex -i $(OUTDIR)/$(PROJECT).log


### Compilation Flags
PDFLATEX_FLAGS  = -halt-on-error -output-directory $(OUTDIR)/

TEXINPUTS = .:$(OUTDIR)/
TEXMFOUTPUT = $(OUTDIR)/

### File Types (for dependencies)
TEX_FILES       = $(shell find . -name '*.tex' -or -name '*.sty' -or -name '*.cls')
BIB_FILES       = $(shell find . -name '*.bib')
BST_FILES       = $(shell find . -name '*.bst')
IMG_FILES       = $(shell find . -path '*.jpg' -or -path '*.png' -or \( \! -path './$(OUTDIR)/*.pdf' -path '*.pdf' \) )
TEX_IMAGE_FILES = $(shell find ./$(FIG_INPUTDIR)/ -name '*.tex')
PY_IMAGE_FILES  = $(shell find ./$(PY_INPUTDIR)/ -name '*.py')
BIN_IMAGES      = $(shell find ./$(LIGHT_TABLE)/ -name "*.pdf")


### Standard PDF Viewers
# Defines a set of standard PDF viewer tools to use when displaying the result
# with the display target. Currently chosen are defaults which should work on
# most linux systems with GNOME installed and on all OSX systems.

UNAME := $(shell uname)

ifeq ($(UNAME), Linux)
PDFVIEWER = okular
endif

ifeq ($(UNAME), Darwin)
PDFVIEWER = open
endif

### Clean
# This target cleans the temporary files generated by the TeX programs in
# use. All temporary files generated by this makefile will be placed in $(OUTDIR)/
# so cleanup is easy.

clean::
	rm -rf $(OUTDIR)/
	rm -rf $(PY_OUTDIR)
	rm -rf $(FIG_OUTDIR)

### Core Latex Generation
# Performs the typical build process for latex generations so that all
# references are resolved correctly. If adding components to this run-time
# always take caution and implement the worst case set of commands.
# Example: latex, bibtex, latex, latex
#
# Note the use of order-only prerequisites (prerequisites following the |).
# Order-only prerequisites do not effect the target -- if the order-only
# prerequisite has changed and none of the normal prerequisites have changed
# then this target IS NOT run.
#
# In order to function for projects which use a subset of the provided features
# it is important to verify that optional dependencies exist before calling a
# target; for instance, see how bibliography files (.bbl) are handled as a
# dependency.

class:
	cd $(CLASS); yes | latex  $(CLASS).ins

$(FIG_OUTDIR)/:
	mkdir -p $(FIG_OUTDIR)/

#$(PY_OUTDIR)/:
	#mkdir -p $(PY_OUTDIR)/

latex_images: $(TEX_IMAGE_FILES) | $(FIG_OUTDIR)/
	$(FIG_LATEX) $(FIG_LATEXFLAGS) $(TEX_IMAGE_FILES)
	#$(foreach file, $(TEX_IMAGE_FILES), $(shell $(FIG_LATEX) $(FIG_LATEXFLAGS) $(file)))

python_images: $(PY_IMAGE_FILES) | $(FIG_OUTDIR)/
	$(foreach file, $(PY_IMAGE_FILES), $(shell $(PY_BINARY) $(PY_FLAGS) $(file)))

light_table: $(BIN_IMAGES) | latex_images python_images
	cp $(BIN_IMAGES) $(FIG_OUTDIR)

$(OUTDIR)/:
	mkdir -p $(OUTDIR)/

$(OUTDIR)/$(PROJECT).aux: $(TEX_FILES) $(IMG_FILES) | class $(OUTDIR)/
	$(LATEX) $(PDFLATEX_FLAGS) $(PROJECT)

$(OUTDIR)/$(PROJECT).bbl: $(BIB_FILES) | $(OUTDIR)/$(PROJECT).aux
	bibtex $(OUTDIR)/$(PROJECT)
	$(LATEX) $(PDFLATEX_FLAGS) $(PROJECT)

$(OUTDIR)/$(PROJECT).pdf: $(OUTDIR)/$(PROJECT).aux $(if $(BIB_FILES), $(OUTDIR)/$(PROJECT).bbl) | latex_images python_images light_table
	$(LATEX) $(PDFLATEX_FLAGS) $(PROJECT).tex
	cp $@ .
